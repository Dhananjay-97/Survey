from flask_api import SurveyGeneratorAPI
from survey_generator import SurveyGenerator
from flask import jsonify
import json
import sqlite3
import argparse
import time
import logging

def main(json_object):

    
    survey_gen_obj = SurveyGenerator()

    try:
        logging.getLogger().info('json file started')
        questionnaire, _ = survey_gen_obj.create_survey(json_object['project_name'],
                                                    json_object['business_overview'],
                                                    json_object['research_objectives'],
                                                    json_object['project_name'],
                                                    json_object["request_id"])
        logging.getLogger().info('json file ended')
        _ = survey_gen_obj.export_docx(json_object['project_name'],
                                            json_object['company_name'],
                                            json_object['research_objectives'],
                                            json_object["request_id"],
                                            questionnaire
                                            )
        logging.getLogger().info('docx file ended')
        end_time = time.time()
        execution_time = end_time - start_time
        execution_time = str(round(execution_time, 2)) + 'sec'
        survey_gen_obj.update_metrics(json_object["project_name"],
                                    json_object["company_name"],
                                    questionnaire,execution_time)
        request_id = json_object["request_id"]
        conn = sqlite3.connect('./sdk_sqlite.db')
        cursor = conn.cursor()
        ins = 'UPDATE request_status SET status=1 WHERE request_id=?'
        cursor.execute(ins, (request_id,))
        conn.commit()
        conn.close()
    except Exception as error:
        #Trace the last line of error and return it in message for easier debugging
        trace = []
        tb = error.__traceback__
        while tb is not None:
            trace.append({
                "filename": tb.tb_frame.f_code.co_filename,
                "name": tb.tb_frame.f_code.co_name,
                "lineno": tb.tb_lineno
            })
            tb = tb.tb_next   
        response = {"success": 0,
                    "status":'ERROR',
                    "request_id": json_object["request_id"],
                    "project_name": json_object["project_name"],
                    "company_name": json_object["company_name"],
                    "business_overview": json_object["business_overview"],
                    "research_objectives": json_object["research_objectives"],
                    "industry": json_object["industry"],
                    "use_case": json_object["use_case"],
                    "message": f"{error} on {trace[-1]['lineno']}"
                                f" in {trace[-1]['name']}"} 
        project_name = json_object["project_name"]
        request_id = json_object["request_id"]
        with open(f'questionnaires/questionnaire_{project_name.replace(" ", "_")}_{request_id}.json', 'w') as outfile:
            json.dump(response, outfile, indent=2)
        request_id = json_object["request_id"]
        conn = sqlite3.connect('./sdk_sqlite.db')
        cursor = conn.cursor()
        ins = 'UPDATE request_status SET status=0 WHERE request_id=?'
        cursor.execute(ins, (request_id,))
        # conn.execute(ins)
        conn.commit()
        conn.close()
        response.status_code = 400

if __name__ == '__main__':
	parser = argparse.ArgumentParser()
	parser.add_argument("--json_object", required=True)	
	ARGS = parser.parse_args()
	json_object = json.loads(ARGS.json_object)
	main(json_object)
    # main()

